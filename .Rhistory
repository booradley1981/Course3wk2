tidyr::spread(year, n)
}
#' Create a state map
#'
#' @param state.num State number code
#' @param year Year of data file
#' @return
#' @importFrom graphics points
#' @importFrom maps map
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
#' Read fars data file
#'
#' @param filename is a string representing the name of the data file
#' @return data frame named data
#' @return if filename input is not found, returns error message file does not exist
#' @examples fars_read("accident_2013.csv.bz2")
#' @importFrom readr read_csv
#' @importFrom dplyr tbl_df
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' Build filename
#'
#' @param year is an integer representing year
#' @return string representing a filename
#' @examples make_filename(2013)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#'
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' Create a state map
#'
#' @param state.num State number code
#' @param year Year of data file
#' @return
#' @importFrom graphics points
#' @importFrom maps map
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_read_years(2013)
fars_read_years(2013:2015)
fars_read_years(c(2013,2015))
fars_read_years(c(2013,2016))
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
dat <- fars_read(file)
dat <- fars_read("accident_2013.csv.bz2")
View(dat)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
dplyr::mutate(dat, year = 2013) %>%
dplyr::select(MONTH, year)
fars_summarize_years(2013)
fars_summarize_years(2016)
fars_summarize_years(2015)
fars_summarize_years(2013:2015)
fars_summarize_years(c(2013,2015)
)
document
document()
fars_map_state(2,2013)
?fars_read
fars_read("accident_2013.csv.bz2")
summarise(dat)
summarise("dat")
summarise(dat)
View(dat)
summarize(dat)
View(dat)
summary(dat)
fars_map_state(1,2013)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(1,2013)
load("maps")
library(maps)
library(stats)
library(maps)
load("maps")
load("map")
library(map)
library(maps)
load("graphics")
load(graphics)
load(maps)
load("maps")
load("MASS")
load(MASS)
?load
install.packages("maps")
library(maps)
fars_map_state(1,2013)
fars_map_state(2,2013:2015)
fars_map_state(1,2013:2015)
fars_map_state(1,2013)
fars_map_state(2,2013)
fars_map_state(2,2014)
fars_map_state(1,2014)
fars_map_state(1,2015)
fars_map_state(3,2015)
fars_map_state(4,2015)
fars_map_state(4,2016)
document()
Sys.info()['sysname']
path.expand('~')
normalizePath('.')
normalizePath('..')
browseVignettes(ddplyr)
browseVignettes("ddplyr")
browseVignettes("dplyr")
browseVignettes("ggplot")
browseVignettes("ggplot2")
library("devtools", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.3")
library("dplyr", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.3")
use_vignette(fars_functions_vignette, pkg = ".")
use_vignette("fars_functions_usage", pkg = ".")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::kable(head(mtcars, 10))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::kable(head(mtcars, 10))
# fars_functions.jmaghirang.R
# fars functions with documentation
# February 4, 2018
# Jude Maghirang
#' Read fars data file
#'
#' @param filename is a string representing the name of the data file
#' @return data frame named data
#' @return if filename input is not found, returns error message file does not exist
#' @examples fars_read("accident_2013.csv.bz2")
#' @importFrom readr read_csv
#' @importFrom dplyr tbl_df
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' Build filename
#'
#' @param year is an integer representing year
#' @return string representing a filename
#' @examples make_filename(2013)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' Read individual files (each year)
#'
#' @param years is an integer or list or vector representing year(s)
#' @return data frames for each year-file containing month and year columns
#' @return if year is invalid (no existing file) returns warning
#' @examples fars_read_years (2013)
#' @examples fars_read_years (2013:2015)
#' @examples fars_read_years (c(2013,2015))
#' @importFrom dplyr mutate
#' @importFrom dplyr select
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#'Summarize year file
#'
#' @param years is an integer or list or vector representing year(s)
#' @return data frame containing a row for each month and columns with counts for each year
#' @examples fars_read_years (2013)
#' @examples fars_read_years (2013:2015)
#' @examples fars_read_years (c(2013,2015))
#' @importFrom dplyr bind_rows
#' @importFrom dplyr group_by
#' @importFrom dplyr summarize
#' @importFrom tidyr spread
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' Create a state map
#'
#' @param state.num State number code
#' @param year Year of data file
#' @examples fars_map_state(1,2013)
#' @examples fars_map_state(4,2015)
#' @return plot of map
#' @return if state number or file corresponding to year does not exist
#' @importFrom graphics points
#' @importFrom maps map
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
# fars_functions.jmaghirang.R
# fars functions with documentation
# February 4, 2018
# Jude Maghirang
#' Read fars data file
#'
#' @param filename is a string representing the name of the data file
#' @return data frame named data
#' @return if filename input is not found, returns error message file does not exist
#' @examples fars_read("accident_2013.csv.bz2")
#' @importFrom readr read_csv
#' @importFrom dplyr tbl_df
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' Build filename
#'
#' @param year is an integer representing year
#' @return string representing a filename
#' @examples make_filename(2013)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' Read individual files (each year)
#'
#' @param years is an integer or list or vector representing year(s)
#' @return data frames for each year-file containing month and year columns
#' @return if year is invalid (no existing file) returns warning
#' @examples fars_read_years (2013)
#' @examples fars_read_years (2013:2015)
#' @examples fars_read_years (c(2013,2015))
#' @importFrom dplyr mutate
#' @importFrom dplyr select
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#'Summarize year file
#'
#' @param years is an integer or list or vector representing year(s)
#' @return data frame containing a row for each month and columns with counts for each year
#' @examples fars_read_years (2013)
#' @examples fars_read_years (2013:2015)
#' @examples fars_read_years (c(2013,2015))
#' @importFrom dplyr bind_rows
#' @importFrom dplyr group_by
#' @importFrom dplyr summarize
#' @importFrom tidyr spread
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' Create a state map
#'
#' @param state.num State number code
#' @param year Year of data file
#' @examples fars_map_state(1,2013)
#' @examples fars_map_state(4,2015)
#' @return plot of map
#' @return if state number or file corresponding to year does not exist
#' @importFrom graphics points
#' @importFrom maps map
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(1,2013)
library("testthat", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.3")
library(testthat)
expect_that(sqrt(3) * sqrt(3), equals(3))
fnstr <- make_filename(2013)
summarise(fnstr)
class(fnstr)
test_that("make_file",{
fnstr <- make_filename(2013)
expect_that(fnstr, is_a("character"))
}
)
test_that("make_file",{
fnstr <- make_filename(2013)
expect_that(fnstr, is_a("number"))
}
)
test_that("make_file",{
fnstr <- make_filename(2013)
expect_that(fnstr, is_a("lm"))
}
)
test_that("read_years",{
yeardf <- fars_read_years(2013)
expect_that(yeardf, is_a("character"))
}
)
test_that("read_years",{
yeardf <- fars_read_years(2013)
expect_that(yeardf, is_a("df"))
}
)
yeardf <- fars_read_years(2013)
View(yeardf)
View(yeardf)
test_that("read_years",{
yeardf <- fars_read_years(2013)
expect_that(yeardf, is_a("list"))
}
)
test()
library(testthat)
library(Course3wk2)
test_check("Course3wk2")
# test the make_filename helper function
test_that("make_file",{
fnstr <- make_filename(2013)
expect_that(fnstr, is_a("character"))
}
)
# test the fars_read_years function
test_that("read_years",{
yeardf <- fars_read_years(2013)
expect_that(yeardf, is_a("list"))
}
)
library(testthat)
library(Course3wk2)
test_check("Course3wk2")
# test the make_filename helper function
test_that("make_file",{
fnstr <- make_filename(2013)
expect_that(fnstr, is_a("character"))
}
)
# test the fars_read_years function
test_that("read_years",{
yeardf <- fars_read_years(2013)
expect_that(yeardf, is_a("list"))
}
)
library(testthat)
library(Course3wk2)
test_check("Course3wk2")
# test the make_filename helper function
test_that("make_file",{
fnstr <- make_filename(2013)
expect_that(fnstr, is_a("character"))
}
)
# test the fars_read_years function
test_that("read_years",{
yeardf <- fars_read_years(2013)
expect_that(yeardf, is_a("list"))
}
)
library(testthat)
library(Course3wk2)
test_check("Course3wk2")
# test the make_filename helper function
test_that("make_file",{
fnstr <- make_filename(2013)
expect_that(fnstr, is_a("character"))
}
)
# test the fars_read_years function
test_that("read_years",{
yeardf <- fars_read_years(2013)
expect_that(yeardf, is_a("list"))
}
)
test()
yeardf <- fars_read_years(2013)
yeardf <- fars_read_years(2014)
View(yeardf)
yeardf <- fars_read_years(2013)
View(yeardf)
library(Course3wk2)
devtools::load_all(".")
